syntax = "proto3";
package message;

enum MsgRouteType {
  Tcp = 0;
}

message MsgRoute {
  string addr = 1;
  MsgRouteType route_type = 2;
}

message ChatMsg {
  // 客户端生成的id
  string local_id = 1;
  // 生成时间
  int64 local_at = 2;
  // 服务端生成的id
  string server_id = 3;
  // 服务端时间
  int64 server_at = 4;
  // 服务端生成的序列号id
  int64 seq_id = 5;
  // 发送者id
  int64 sender_id = 6;
  // 接受者id
  int64 receiver_id = 7;
  // 消息类型
  ChatType chat_type = 8;
  // 消息内容类型
  ChatContentType content_type = 9;
  // 消息内容
  bytes content = 10;
}

enum ChatType {
  User = 0;
  Group = 1;
}

enum ChatContentType {
  Text = 0;
}

message Ping {}

message Pong {}

message LoginRequest {
  int64 user_id = 1;
  string token = 2;
  Platfrom platfrom = 3;
}

message LoginResponse {
  enum LoginResponseState {
    Fail = 0;
    Success = 1;
  }
  LoginResponseState state = 1;
  optional string error = 2;
}

message Handshake {
  oneof union {
    LoginRequest login_req = 1;
    LoginResponse login_res = 2;
  }
}

message Msg {
  oneof union {
    Ping ping = 1;
    Pong Pong = 2;
    Handshake handshake = 3;
    ChatMsg chat_msg = 4;
  }
}

enum Platfrom {
  Unknow = 0;
  Windows = 1;
  Linux = 2;
  Mac = 3;
  Android = 4;
  Ios = 5;
  Web = 6;
}

message Session {
  // 聊天类型
  ChatType chat_type = 1;
  // 发送者id
  int64 sender_id = 2;
  // 接受者id
  int64 receiver_id = 3;
}

message SendMsgResponse {}

service MsgService {
  // 向chat 服务发送聊天消息
  rpc SendMessage(ChatMsg) returns (SendMsgResponse);
  // 向用户发送消息
  rpc SendMsgToUser(ChatMsg) returns (SendMsgResponse);
  // 向组发送消息
  rpc SendGroupMsgToUser(ChatMsg) returns (SendMsgResponse);
}

message MsgResponse {
  string local_id = 1;
  string server_id = 2;
  int64 server_at = 3;
  string err = 4;
}

service ChatProducerService { rpc SendMessage(ChatMsg) returns (MsgResponse); }