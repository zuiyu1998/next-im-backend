// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChatMsg {
    /// 客户端生成的id
    #[prost(string, tag = "1")]
    pub local_id: ::prost::alloc::string::String,
    /// 服务端生成的id
    #[prost(string, tag = "2")]
    pub server_id: ::prost::alloc::string::String,
    /// 服务端生成的序列号id
    #[prost(int64, tag = "3")]
    pub seq_id: i64,
    /// 服务端生成的时间
    #[prost(int64, tag = "4")]
    pub create_at: i64,
    /// 发送者id
    #[prost(int64, tag = "5")]
    pub sender_id: i64,
    /// 接受者id
    #[prost(int64, tag = "6")]
    pub receiver_id: i64,
    /// 消息类型
    #[prost(enumeration = "ChatMsgType", tag = "7")]
    pub msg_type: i32,
    /// 消息内容
    #[prost(bytes = "vec", tag = "8")]
    pub content: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Msg {
    #[prost(oneof = "msg::Union", tags = "1")]
    pub union: ::core::option::Option<msg::Union>,
}
/// Nested message and enum types in `Msg`.
pub mod msg {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Union {
        #[prost(message, tag = "1")]
        ChatMsg(super::ChatMsg),
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ChatMsgType {
    Text = 0,
}
impl ChatMsgType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ChatMsgType::Text => "Text",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Text" => Some(Self::Text),
            _ => None,
        }
    }
}
